{"version":3,"sources":["../src/ReactExpandableListView.js"],"names":["ReactListView","props","data","state","headerAttName","itemsAttName","_refi","makeHeaderRef","makeItemRef","Object","keys","map","k","index","header","items","isOpened","height","headerRef","itemRef","h","handleToggle","bind","display","overflow","headerIndex","newData","assign","setState","propTypes","array","isRequired","string"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;IAEqBA,a;;;AAOnB,yBAAaC,KAAb,EAAoB;AAAA;;AAAA,8HACZA,KADY;;AAAA,QAEVC,IAFU,GAED,MAAKD,KAFJ,CAEVC,IAFU;;AAGlB,UAAKC,KAAL,GAAa;AACXD;AADW,KAAb;AAHkB;AAMnB;;;;6BAES;AAAA;;AAAA,mBACgC,KAAKD,KADrC;AAAA,UACAG,aADA,UACAA,aADA;AAAA,UACeC,YADf,UACeA,YADf;AAAA,UAEAH,IAFA,GAES,KAAKC,KAFd,CAEAD,IAFA;;AAGR,UAAII,QAAQ,CAAZ;AACA,UAAIC,gBAAgB,SAAhBA,aAAgB,GAAM;AACxB,+BAAqBD,KAArB;AACD,OAFD;;AAIA,UAAIE,cAAc,SAAdA,WAAc,GAAM;AACtB,6BAAmBF,KAAnB;AACD,OAFD;;AAIA,aACE;AAAA;AAAA,UAAK,KAAI,UAAT,EAAoB,WAAU,8BAA9B;AACE;AAAA;AAAA,YAAI,WAAU,wBAAd;AAEEG,iBAAOC,IAAP,CAAYR,IAAZ,EAAkBS,GAAlB,CAAsB,UAACC,CAAD,EAAIC,KAAJ,EAAc;AAClC,gBAAMC,SAASZ,KAAKU,CAAL,EAAQR,aAAR,CAAf;AACA,gBAAMW,QAAQb,KAAKU,CAAL,EAAQP,YAAR,CAAd;AAFkC,gBAG1BW,QAH0B,GAGbd,KAAKU,CAAL,CAHa,CAG1BI,QAH0B;AAAA,gBAI1BC,MAJ0B,GAIff,KAAKU,CAAL,CAJe,CAI1BK,MAJ0B;;AAKlCX;AACA,gBAAMY,YAAYX,eAAlB;AACA,gBAAMY,UAAUX,aAAhB;;AAEA,mBACE;AAAA;AAAA;AACE,qBAAKK,KADP;AAEE,8BAAc,EAACO,GAAG,CAAJ,EAFhB;AAGE,uBAAO,EAACA,GAAG,yBAAOJ,WAAWC,MAAX,GAAoB,CAA3B,CAAJ,EAHT;AAKE;AAAA,oBAAEG,CAAF,QAAEA,CAAF;AAAA,uBACE;AAAA;AAAA,oBAAK,KAAKR,CAAV;AACE;AAAA;AAAA;AACE;AACE,2BAAKM,SADP;AAEE,8BAAQJ,MAFV;AAGE,mCAAaD,KAHf;AAIE,iCAAU,gCAJZ;AAKE,oCAAc,OAAKQ,YAAL,CAAkBC,IAAlB,SAA6BT,KAA7B;AALhB,sBADF;AAQE;AAAA;AAAA;AACE,+BAAO;AACLU,mCAAS,OADJ;AAELC,oCAAU,QAFL;AAGLP,uCAAWG;AAHN,yBADT;AAME;AACE,6BAAKD,OADP;AAEE,+BAAOJ,KAFT;AAGE,mCAAU;AAHZ;AANF;AARF;AADF,iBADF;AAAA;AALF,aADF;AAkCD,WA3CD;AAFF;AADF,OADF;AAoDD;;;iCAEaU,W,EAAa;AACzB,UAAIC,UAAUjB,OAAOkB,MAAP,CAAc,EAAd,EAAkB,KAAKxB,KAAL,CAAWD,IAA7B,CAAd;AACAwB,cAAQD,WAAR,EAAqBT,QAArB,GAAgC,CAACU,QAAQD,WAAR,EAAqBT,QAAtD;AACA,WAAKY,QAAL,CACEF,OADF;AAGD;;;;;;AAvFkB1B,a,CACZ6B,S,GAAY;AACjB3B,QAAM,iBAAU4B,KAAV,CAAgBC,UADL;AAEjB3B,iBAAe,iBAAU4B,MAAV,CAAiBD,UAFf;AAGjB1B,gBAAc,iBAAU2B,MAAV,CAAiBD;AAHd,C;kBADA/B,a","file":"ReactExpandableListView.js","sourcesContent":["import React, { Component, PropTypes } from 'react'\nimport ListHeader from './lib/ListHeader'\nimport ListItemsManager from './lib/ListItemsManager'\nimport { Motion, spring } from 'react-motion'\n\nexport default class ReactListView extends Component {\n  static propTypes = {\n    data: PropTypes.array.isRequired,\n    headerAttName: PropTypes.string.isRequired,\n    itemsAttName: PropTypes.string.isRequired\n  }\n\n  constructor (props) {\n    super(props)\n    const { data } = this.props\n    this.state = {\n      data\n    }\n  }\n\n  render () {\n    const { headerAttName, itemsAttName } = this.props\n    const { data } = this.state\n    let _refi = 0\n    let makeHeaderRef = () => {\n      return `ListHeader-${_refi}`\n    }\n\n    let makeItemRef = () => {\n      return `ListItem-${_refi}`\n    }\n\n    return (\n      <div ref=\"listview\" className=\"expandable-listview_outerDiv\">\n        <ul className=\"expandable-listview_ul\">\n        {\n          Object.keys(data).map((k, index) => {\n            const header = data[k][headerAttName]\n            const items = data[k][itemsAttName]\n            const { isOpened } = data[k]\n            const { height } = data[k]\n            _refi++\n            const headerRef = makeHeaderRef()\n            const itemRef = makeItemRef()\n\n            return (\n              <Motion\n                key={index}\n                defaultStyle={{h: 0}}\n                style={{h: spring(isOpened ? height : 0)}}>\n                {\n                ({h}) => (\n                  <div key={k}>\n                    <li>\n                      <ListHeader\n                        ref={headerRef}\n                        header={header}\n                        headerIndex={index}\n                        className=\"expandable-listview_listHeader\"\n                        handleToggle={this.handleToggle.bind(this, index)}\n                      />\n                      <div\n                        style={{\n                          display: 'block',\n                          overflow: 'hidden',\n                          height: `${h}`\n                        }}>\n                        <ListItemsManager\n                          ref={itemRef}\n                          items={items}\n                          className=\"expandable-listview_listItems\"\n                        />\n                      </div>\n                    </li>\n                  </div>\n                )\n              }\n              </Motion>\n          )\n          })\n        }\n        </ul>\n      </div>\n    )\n  }\n\n  handleToggle (headerIndex) {\n    let newData = Object.assign({}, this.state.data)\n    newData[headerIndex].isOpened = !newData[headerIndex].isOpened\n    this.setState(\n      newData\n    )\n  }\n}\n"]}